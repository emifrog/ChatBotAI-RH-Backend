// Service d'intelligence artificielle utilisant OpenRouter

const { openrouter } = require('@openrouter/ai-sdk-provider');
const { generateText } = require('ai');
const axios = require('axios'); // Fallback pour les cas sp√©ciaux

class AIService {
  constructor() {
    this.apiKey = process.env.OPENROUTER_API_KEY;
    this.baseURL = process.env.OPENROUTER_BASE_URL || 'https://openrouter.ai/api/v1';
    
    // Contexte syst√®me pour le chatbot RH
    this.systemPrompt = `Tu es un assistant RH intelligent pour l'entreprise. Tu as acc√®s aux informations suivantes :
    
    - Gestion des cong√©s (soldes, demandes, historique)
    - Bulletins de paie et informations salariales
    - Catalogue de formations et inscriptions
    - Informations employ√©s et organigramme
    - Proc√©dures et politiques RH
    
    R√®gles importantes :
    1. Sois professionnel mais amical
    2. Donne des r√©ponses concises et pr√©cises
    3. Si tu n'as pas l'information, propose de contacter les RH
    4. Respecte la confidentialit√© des donn√©es
    5. Utilise le tutoiement sauf si l'employ√© pr√©f√®re le vouvoiement
    
    Pour les actions sp√©cifiques, retourne un JSON avec le format :
    {
      "intent": "leave_balance|leave_request|payslip|training|general",
      "entities": {
        "type": "string",
        "startDate": "date",
        "endDate": "date",
        "other": "any"
      },
      "response": "Ta r√©ponse en langage naturel"
    }`;
  }

  // Analyser le message et g√©n√©rer une r√©ponse
  async processMessage(message, context = {}) {
    try {
      const messages = [
        { role: 'system', content: this.systemPrompt },
        ...this.buildContextMessages(context),
        { role: 'user', content: message }
      ];

      const response = await axios.post(
        `${this.baseURL}/chat/completions`,
        {
          model: 'deepseek/deepseek-r1-0528:free', // ou 'openai/gpt-3.5-turbo', ou 'anthropic/claude-instant'
          messages,
          temperature: 0.7,
          max_tokens: 500,
          response_format: { type: "json_object" }
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': 'https://your-company.com',
            'X-Title': 'Chatbot RH'
          }
        }
      );

      const aiResponse = JSON.parse(response.data.choices[0].message.content);
      return this.processAIResponse(aiResponse);
    } catch (error) {
      console.error('Erreur AI Service:', error);
      return this.getFallbackResponse(message);
    }
  }

  // Construire les messages de contexte
  buildContextMessages(context) {
    const messages = [];
    
    if (context.userInfo) {
      messages.push({
        role: 'system',
        content: `Informations utilisateur : ${JSON.stringify(context.userInfo)}`
      });
    }
    
    if (context.previousMessages) {
      messages.push(...context.previousMessages.slice(-5)); // 5 derniers messages
    }
    
    return messages;
  }

  // Traiter la r√©ponse de l'IA
  processAIResponse(aiResponse) {
    // Valider et enrichir la r√©ponse
    const validIntents = ['leave_balance', 'leave_request', 'payslip', 'training', 'general'];
    
    if (!validIntents.includes(aiResponse.intent)) {
      aiResponse.intent = 'general';
    }
    
    // Ajouter des quick actions selon l'intent
    aiResponse.quickActions = this.getQuickActions(aiResponse.intent);
    
    return aiResponse;
  }

  // Actions rapides sugg√©r√©es
  getQuickActions(intent) {
    const actions = {
      leave_balance: [
        { label: 'üìä Voir le d√©tail', action: 'view_leave_details' },
        { label: '‚ûï Faire une demande', action: 'create_leave_request' },
        { label: 'üìÖ Historique', action: 'view_leave_history' }
      ],
      leave_request: [
        { label: '‚úÖ Confirmer', action: 'confirm_request' },
        { label: 'üìÖ Modifier les dates', action: 'modify_dates' },
        { label: '‚ùå Annuler', action: 'cancel_request' }
      ],
      payslip: [
        { label: 'üì• T√©l√©charger', action: 'download_payslip' },
        { label: 'üìä Voir le d√©tail', action: 'view_details' },
        { label: 'üìÜ Historique', action: 'view_history' }
      ],
      training: [
        { label: 'üìö Catalogue', action: 'view_catalog' },
        { label: '‚úçÔ∏è S\'inscrire', action: 'enroll' },
        { label: 'üéì Mes formations', action: 'my_trainings' }
      ],
      general: [
        { label: 'üèñÔ∏è Cong√©s', action: 'leaves' },
        { label: 'üí∞ Paie', action: 'payroll' },
        { label: 'üìö Formations', action: 'training' },
        { label: 'üë§ Mon profil', action: 'profile' }
      ]
    };
    
    return actions[intent] || actions.general;
  }

  // R√©ponse de secours si l'IA √©choue
  getFallbackResponse(message) {
    const lowerMessage = message.toLowerCase();
    
    // D√©tection basique d'intention
    if (lowerMessage.includes('cong√©') || lowerMessage.includes('vacance')) {
      return {
        intent: 'leave_balance',
        response: 'Je vais consulter vos informations de cong√©s.',
        quickActions: this.getQuickActions('leave_balance')
      };
    }
    
    if (lowerMessage.includes('paie') || lowerMessage.includes('salaire') || lowerMessage.includes('bulletin')) {
      return {
        intent: 'payslip',
        response: 'Je vais r√©cup√©rer vos bulletins de paie.',
        quickActions: this.getQuickActions('payslip')
      };
    }
    
    if (lowerMessage.includes('formation')) {
      return {
        intent: 'training',
        response: 'Voici les options concernant les formations.',
        quickActions: this.getQuickActions('training')
      };
    }
    
    return {
      intent: 'general',
      response: 'Comment puis-je vous aider aujourd\'hui ?',
      quickActions: this.getQuickActions('general')
    };
  }

  // G√©n√©rer des suggestions de questions
  async generateSuggestions(context) {
    const baseSuggestions = [
      "Quel est mon solde de cong√©s ?",
      "Je voudrais poser des cong√©s",
      "O√π est mon dernier bulletin de paie ?",
      "Quelles formations sont disponibles ?",
      "Comment mettre √† jour mes coordonn√©es ?"
    ];
    
    // Personnaliser selon le contexte
    if (context.lastIntent === 'leave_balance') {
      return [
        "Je veux poser 5 jours en ao√ªt",
        "Combien de RTT me reste-t-il ?",
        "Voir mon historique de cong√©s",
        "Annuler ma derni√®re demande"
      ];
    }
    
    return baseSuggestions.slice(0, 4);
  }
}

module.exports = new AIService();